/**
 * @file Source code generated by PDL compiler.
 * @sdkversion 12.3.0.1
 * @extension Microsoft_Azure_AD
 */

import { BladeClosedWithDataHandler, BladeReference, PdlBladeCallbacks } from "Fx/Composition";
export interface RolesListBladeInputs {
    scope: any;
}
export interface RolesListBladeReferenceFactory {
    /**
     * Creates a reference to the RolesListBlade blade in the Microsoft_Azure_AD extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: RolesListBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<RolesListBladeInputs>;
}
export interface SelectMemberInputs {
    stepInput: any;
}
export interface SelectMemberOutputs {
    stepOutput?: any;
}
export interface SelectMemberReferenceFactory {
    /**
     * Creates a reference to the SelectMember blade in the Microsoft_Azure_AD extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: SelectMemberInputs;
        /** Callbacks used to supply "outputs" from a PDL Blade back to the parent Blade/Part. */
        callbacks?: PdlBladeCallbacks<SelectMemberOutputs>;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<SelectMemberInputs>;
}
export interface SelectMemberV3Inputs {
    title: any;
    subtitle: any;
}
export interface SelectMemberV3ReferenceFactory {
    /**
     * Creates a reference to the SelectMemberV3 blade in the Microsoft_Azure_AD extension.
     * @param options Configures the blade reference.
     */
    createReference<TResult, TConfig>(options: {
        /** Input parameters to pass to the child blade. */
        parameters: SelectMemberV3Inputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<TResult>;
        /**
         * A callback that supplies initial data for the parameter provider in the child blade each time it opens.
         * Note that the object received by the parameter provider will be a deep clone of the value you give, rather than the original instance, because it is passed (and sometimes stored) in a serialized form.
         * @return Initial data for the child blade.
         */
        supplyInitialData?: () => TResult;
        /**
         * A callback that supplies additional configuration options for the provider each time it opens. You can use this to pass non-editable data, for example configuring how a form will be displayed.
         * @return Arbitrary configuration options for the child blade.
         */
        supplyProviderConfig?: () => TConfig;
        /** A callback to be invoked when the child blade supplies a result and closes. */
        receiveResult?: (result: TResult) => void;
        /**
         * Provides an easy way to integrate a parameter collector with an EditScope.
         * The collector will supply initial data to the provider from this edit scope property, and will automatically insert the provider's output into this edit scope property.
         * The net result is that your parameter collector will act as an editor for the specified edit scope property.
         * If you specify this option, do not also specify either supplyInitialData or receiveResult.
         */
        editScopeAccessor?: MsPortalFx.ViewModels.Forms.EditScopeAccessors<TResult>;
    }): BladeReference<SelectMemberV3Inputs>;
}
export interface UserAssignmentsBladeInputs {
    scope: any;
}
export interface UserAssignmentsBladeReferenceFactory {
    /**
     * Creates a reference to the UserAssignmentsBlade blade in the Microsoft_Azure_AD extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: UserAssignmentsBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<UserAssignmentsBladeInputs>;
}
declare global {
    interface ImportedBladeReferenceFactories {
        "Microsoft_Azure_AD": {
            "Blades": {
                "RolesListBlade": RolesListBladeReferenceFactory;
                "SelectMember": SelectMemberReferenceFactory;
                "SelectMemberV3": SelectMemberV3ReferenceFactory;
                "UserAssignmentsBlade": UserAssignmentsBladeReferenceFactory;
            };
            "MenuBlades": {
            };
        };
    }
}
