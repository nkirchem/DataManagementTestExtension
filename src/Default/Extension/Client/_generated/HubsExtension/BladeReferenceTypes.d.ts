/**
 * @file Source code generated by PDL compiler.
 * @sdkversion 12.3.0.1
 * @extension HubsExtension
 */
/// <reference path="../../_extensions/Hubs/SharedTypes.d.ts" />
/// <reference path="../../_extensions/Hubs/HubsExtension.d.ts" />

import { BladeClosedHandler, BladeClosedWithDataHandler, BladeReference } from "Fx/Composition";
export interface ARGBrowseAllInMenuReferenceFactory {
    /**
     * Creates a reference to the ARGBrowseAllInMenu blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.BrowseAll.InMenuParameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.BrowseAll.InMenuParameters>;
}
export interface ARGBrowseResourceGroupsInMenuReferenceFactory {
    /**
     * Creates a reference to the ARGBrowseResourceGroupsInMenu blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.BrowseResourceGroups.InMenuParameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.BrowseResourceGroups.InMenuParameters>;
}
export interface ARGBrowseResourcesInMenuReferenceFactory {
    /**
     * Creates a reference to the ARGBrowseResourcesInMenu blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.BrowseResource.InMenuParameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.BrowseResource.InMenuParameters>;
}
export interface ArgEditPinnedQueryBladeReferenceFactory {
    /**
     * Creates a reference to the ArgEditPinnedQueryBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.ArgEditPinnedQueryBlade.Parameters;
        /** Callback that is invoked when the blade is closed and returns the data to the parent. */
        onClosed: BladeClosedWithDataHandler<HubsExtension.ArgEditPinnedQueryBlade.BladeResult>;
    }): BladeReference<HubsExtension.ArgEditPinnedQueryBlade.Parameters>;
}
export interface ArgQueryBladeReferenceFactory {
    /**
     * Creates a reference to the ArgQueryBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.ArgQueryBlade.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.ArgQueryBlade.Parameters>;
}
export interface AssignTagsBladeReferenceFactory {
    /**
     * Creates a reference to the AssignTagsBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.AssignTagsBlade.Parameters;
        /** Callback that is invoked when the blade is closed and returns the data to the parent. */
        onClosed: BladeClosedWithDataHandler<HubsExtension.AssignTagsBlade.Results>;
    }): BladeReference<HubsExtension.AssignTagsBlade.Parameters>;
}
export interface BrowseAllReferenceFactory {
    /**
     * Creates a reference to the BrowseAll blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.BrowseAll.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.BrowseAll.Parameters>;
}
export interface BrowseAllInMenuInputs {
    resourceType: any;
    scope?: any;
}
export interface BrowseAllInMenuReferenceFactory {
    /**
     * Creates a reference to the BrowseAllInMenu blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: BrowseAllInMenuInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<BrowseAllInMenuInputs>;
}
export interface BrowseAllLegacyReferenceFactory {
    /**
     * Creates a reference to the BrowseAllLegacy blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.BrowseAll.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.BrowseAll.Parameters>;
}
export interface BrowseAllResourcesBladeInputs {
    resourceType?: any;
    selectedSubscriptionId?: any;
    filter?: any;
    scope?: any;
    kind?: any;
}
export interface BrowseAllResourcesBladeReferenceFactory {
    /**
     * Creates a reference to the BrowseAllResourcesBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: BrowseAllResourcesBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<BrowseAllResourcesBladeInputs>;
}
export interface BrowseFallback_ReactViewReferenceFactory {
    /**
     * Creates a reference to the BrowseFallback.ReactView blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: { browsePrereqsRequest: { resourceType: string; resourceTypeKey?: string; includeColumnsVersion?: number; includeFavoriteViewId?: boolean; }; isAllResources: boolean; isFallbackScenario: boolean; isResourceGroups: boolean; resourceTypes: string[]; scope: string; titlePrefix: string; errorCode?: number; browseType?: string; showRedirectMessage?: boolean; };
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<{ browsePrereqsRequest: { resourceType: string; resourceTypeKey?: string; includeColumnsVersion?: number; includeFavoriteViewId?: boolean; }; isAllResources: boolean; isFallbackScenario: boolean; isResourceGroups: boolean; resourceTypes: string[]; scope: string; titlePrefix: string; errorCode?: number; browseType?: string; showRedirectMessage?: boolean; }>;
}
export interface BrowseGroupsInMenuInputs {
    resourceType: any;
    scope?: any;
}
export interface BrowseGroupsInMenuReferenceFactory {
    /**
     * Creates a reference to the BrowseGroupsInMenu blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: BrowseGroupsInMenuInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<BrowseGroupsInMenuInputs>;
}
export interface BrowseInMenuInputs {
    resourceType: any;
    scope?: any;
    kind?: any;
}
export interface BrowseInMenuReferenceFactory {
    /**
     * Creates a reference to the BrowseInMenu blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: BrowseInMenuInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<BrowseInMenuInputs>;
}
export interface BrowseInstanceLinkBladeInputs {
    resourceType?: any;
    selectedSubscriptionId?: any;
    filter?: any;
    scope?: any;
    kind?: any;
}
export interface BrowseInstanceLinkBladeReferenceFactory {
    /**
     * Creates a reference to the BrowseInstanceLinkBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: BrowseInstanceLinkBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<BrowseInstanceLinkBladeInputs>;
}
export interface BrowseQueryReferenceFactory {
    /**
     * Creates a reference to the BrowseQuery blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.BrowseQuery.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.BrowseQuery.Parameters>;
}
export interface BrowseResourceReferenceFactory {
    /**
     * Creates a reference to the BrowseResource blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.BrowseResource.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.BrowseResource.Parameters>;
}
export interface BrowseResourceBladeInputs {
    resourceType?: any;
    selectedSubscriptionId?: any;
    filter?: any;
    scope?: any;
    kind?: any;
}
export interface BrowseResourceBladeReferenceFactory {
    /**
     * Creates a reference to the BrowseResourceBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: BrowseResourceBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<BrowseResourceBladeInputs>;
}
export interface BrowseResourceGroupBladeInputs {
    resourceType?: any;
    selectedSubscriptionId?: any;
    filter?: any;
    scope?: any;
    kind?: any;
}
export interface BrowseResourceGroupBladeReferenceFactory {
    /**
     * Creates a reference to the BrowseResourceGroupBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: BrowseResourceGroupBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<BrowseResourceGroupBladeInputs>;
}
export interface BrowseResourceGroupsReferenceFactory {
    /**
     * Creates a reference to the BrowseResourceGroups blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.BrowseResourceGroups.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.BrowseResourceGroups.Parameters>;
}
export interface BrowseResourcesWithTagReferenceFactory {
    /**
     * Creates a reference to the BrowseResourcesWithTag blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.BrowseResourcesWithTag.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.BrowseResourcesWithTag.Parameters>;
}
export interface ColumnChooser_ReactViewReferenceFactory {
    /**
     * Creates a reference to the ColumnChooser.ReactView blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: { subscriptions: readonly string[]; view?: (({ filter: string; filterFacets: { key: string; uniqueId?: string; display?: string; operator: any; value?: any; isAllValues?: boolean; facetKind: any; tagNames?: string[]; useExpansion?: true; }[]; groupByValue: string; sortedColumns: { sortBy: string; order: any; }[]; showAll: boolean; gridColumns: { id: string; visible: boolean; name?: string; }[]; gridColumnWidths: any; currentView: any; visualizationId: string; visualizationType: any; visualizationThreshold: any; visualizationBin: any; subscriptionIds?: string[]; selectedSubscriptionIds?: string[]; } & { id?: string; name?: string; }) | string); resourceType: string; scopeResourceType?: string; version?: number; skipTags?: boolean; };
        /** Callback that is invoked when the blade is closed and returns the data to the parent. */
        onClosed: BladeClosedWithDataHandler<{ update: boolean; columns: { id: string; name: string; lowerName: string; isTag: boolean; visible: boolean; }[]; }>;
    }): BladeReference<{ subscriptions: readonly string[]; view?: (({ filter: string; filterFacets: { key: string; uniqueId?: string; display?: string; operator: any; value?: any; isAllValues?: boolean; facetKind: any; tagNames?: string[]; useExpansion?: true; }[]; groupByValue: string; sortedColumns: { sortBy: string; order: any; }[]; showAll: boolean; gridColumns: { id: string; visible: boolean; name?: string; }[]; gridColumnWidths: any; currentView: any; visualizationId: string; visualizationType: any; visualizationThreshold: any; visualizationBin: any; subscriptionIds?: string[]; selectedSubscriptionIds?: string[]; } & { id?: string; name?: string; }) | string); resourceType: string; scopeResourceType?: string; version?: number; skipTags?: boolean; }>;
}
export interface DeployFromTemplateBladeInputs {
    internal_bladeCallerParams: any;
}
export interface DeployFromTemplateBladeReferenceFactory {
    /**
     * Creates a reference to the DeployFromTemplateBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference<TResult, TConfig>(options: {
        /** Input parameters to pass to the child blade. */
        parameters: DeployFromTemplateBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<TResult>;
        /**
         * A callback that supplies initial data for the parameter provider in the child blade each time it opens.
         * Note that the object received by the parameter provider will be a deep clone of the value you give, rather than the original instance, because it is passed (and sometimes stored) in a serialized form.
         * @return Initial data for the child blade.
         */
        supplyInitialData?: () => TResult;
        /**
         * A callback that supplies additional configuration options for the provider each time it opens. You can use this to pass non-editable data, for example configuring how a form will be displayed.
         * @return Arbitrary configuration options for the child blade.
         */
        supplyProviderConfig?: () => TConfig;
        /** A callback to be invoked when the child blade supplies a result and closes. */
        receiveResult?: (result: TResult) => void;
        /**
         * Provides an easy way to integrate a parameter collector with an EditScope.
         * The collector will supply initial data to the provider from this edit scope property, and will automatically insert the provider's output into this edit scope property.
         * The net result is that your parameter collector will act as an editor for the specified edit scope property.
         * If you specify this option, do not also specify either supplyInitialData or receiveResult.
         */
        editScopeAccessor?: MsPortalFx.ViewModels.Forms.EditScopeAccessors<TResult>;
    }): BladeReference<DeployFromTemplateBladeInputs>;
}
export interface DeploymentDetailsBladeReferenceFactory {
    /**
     * Creates a reference to the DeploymentDetailsBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.DeploymentDetailsMenuBlade.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.DeploymentDetailsMenuBlade.Parameters>;
}
export interface DeploymentInputsBladeInputs {
    id: any;
    referrerInfo?: any;
}
export interface DeploymentInputsBladeReferenceFactory {
    /**
     * Creates a reference to the DeploymentInputsBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: DeploymentInputsBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<DeploymentInputsBladeInputs>;
}
export interface DeploymentOutputsBladeInputs {
    id: any;
    referrerInfo?: any;
}
export interface DeploymentOutputsBladeReferenceFactory {
    /**
     * Creates a reference to the DeploymentOutputsBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: DeploymentOutputsBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<DeploymentOutputsBladeInputs>;
}
export interface DeploymentsList_ReactViewReferenceFactory {
    /**
     * Creates a reference to the DeploymentsList.ReactView blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: { resourceGroup: string; subscriptionId?: string; };
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<{ resourceGroup: string; subscriptionId?: string; }>;
}
export interface DeployToAzureReferenceFactory {
    /**
     * Creates a reference to the DeployToAzure blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference<TResult, TConfig>(options: {
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<TResult>;
        /**
         * A callback that supplies initial data for the parameter provider in the child blade each time it opens.
         * Note that the object received by the parameter provider will be a deep clone of the value you give, rather than the original instance, because it is passed (and sometimes stored) in a serialized form.
         * @return Initial data for the child blade.
         */
        supplyInitialData?: () => TResult;
        /**
         * A callback that supplies additional configuration options for the provider each time it opens. You can use this to pass non-editable data, for example configuring how a form will be displayed.
         * @return Arbitrary configuration options for the child blade.
         */
        supplyProviderConfig?: () => TConfig;
        /** A callback to be invoked when the child blade supplies a result and closes. */
        receiveResult?: (result: TResult) => void;
        /**
         * Provides an easy way to integrate a parameter collector with an EditScope.
         * The collector will supply initial data to the provider from this edit scope property, and will automatically insert the provider's output into this edit scope property.
         * The net result is that your parameter collector will act as an editor for the specified edit scope property.
         * If you specify this option, do not also specify either supplyInitialData or receiveResult.
         */
        editScopeAccessor?: MsPortalFx.ViewModels.Forms.EditScopeAccessors<TResult>;
    }): BladeReference<void>;
}
export interface EditTagsBladeReferenceFactory {
    /**
     * Creates a reference to the EditTagsBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.EditTagsBlade.Parameters;
        /** Callback that is invoked when the blade is closed and returns the data to the parent. */
        onClosed: BladeClosedWithDataHandler<HubsExtension.EditTagsBlade.Results>;
    }): BladeReference<HubsExtension.EditTagsBlade.Parameters>;
}
export interface GptGeneratorBladeReferenceFactory {
    /**
     * Creates a reference to the GptGeneratorBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.GptGeneratorBlade.Parameters;
        /** Callback that is invoked when the blade is closed and returns the data to the parent. */
        onClosed: BladeClosedWithDataHandler<HubsExtension.GptGeneratorBlade.Results>;
    }): BladeReference<HubsExtension.GptGeneratorBlade.Parameters>;
}
export interface InProductFeedbackBladeReferenceFactory {
    /**
     * Creates a reference to the InProductFeedbackBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.InProductFeedbackBlade.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.InProductFeedbackBlade.Parameters>;
}
export interface MapResourceGroupBladeInputs {
    id: any;
}
export interface MapResourceGroupBladeReferenceFactory {
    /**
     * Creates a reference to the MapResourceGroupBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: MapResourceGroupBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<MapResourceGroupBladeInputs>;
}
export interface MoveResources_ReactViewReferenceFactory {
    /**
     * Creates a reference to the MoveResources.ReactView blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: { resourceId: string; moveType: number; resourceIds: string[]; };
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<{ resourceId: string; moveType: number; resourceIds: string[]; }>;
}
export interface MyAccess_ReactViewReferenceFactory {
    /**
     * Creates a reference to the MyAccess.ReactView blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: { resourceId: string; };
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<{ resourceId: string; }>;
}
export interface NotFoundAssetBladeInputs {
    id?: any;
}
export interface NotFoundAssetBladeReferenceFactory {
    /**
     * Creates a reference to the NotFoundAssetBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: NotFoundAssetBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<NotFoundAssetBladeInputs>;
}
export interface ParametersEditorBladeReferenceFactory {
    /**
     * Creates a reference to the ParametersEditorBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference<TResult, TConfig>(options: {
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<TResult>;
        /**
         * A callback that supplies initial data for the parameter provider in the child blade each time it opens.
         * Note that the object received by the parameter provider will be a deep clone of the value you give, rather than the original instance, because it is passed (and sometimes stored) in a serialized form.
         * @return Initial data for the child blade.
         */
        supplyInitialData?: () => TResult;
        /**
         * A callback that supplies additional configuration options for the provider each time it opens. You can use this to pass non-editable data, for example configuring how a form will be displayed.
         * @return Arbitrary configuration options for the child blade.
         */
        supplyProviderConfig?: () => TConfig;
        /** A callback to be invoked when the child blade supplies a result and closes. */
        receiveResult?: (result: TResult) => void;
        /**
         * Provides an easy way to integrate a parameter collector with an EditScope.
         * The collector will supply initial data to the provider from this edit scope property, and will automatically insert the provider's output into this edit scope property.
         * The net result is that your parameter collector will act as an editor for the specified edit scope property.
         * If you specify this option, do not also specify either supplyInitialData or receiveResult.
         */
        editScopeAccessor?: MsPortalFx.ViewModels.Forms.EditScopeAccessors<TResult>;
    }): BladeReference<void>;
}
export interface ParametersFileEditorBladeReferenceFactory {
    /**
     * Creates a reference to the ParametersFileEditorBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference<TResult, TConfig>(options: {
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<TResult>;
        /**
         * A callback that supplies initial data for the parameter provider in the child blade each time it opens.
         * Note that the object received by the parameter provider will be a deep clone of the value you give, rather than the original instance, because it is passed (and sometimes stored) in a serialized form.
         * @return Initial data for the child blade.
         */
        supplyInitialData?: () => TResult;
        /**
         * A callback that supplies additional configuration options for the provider each time it opens. You can use this to pass non-editable data, for example configuring how a form will be displayed.
         * @return Arbitrary configuration options for the child blade.
         */
        supplyProviderConfig?: () => TConfig;
        /** A callback to be invoked when the child blade supplies a result and closes. */
        receiveResult?: (result: TResult) => void;
        /**
         * Provides an easy way to integrate a parameter collector with an EditScope.
         * The collector will supply initial data to the provider from this edit scope property, and will automatically insert the provider's output into this edit scope property.
         * The net result is that your parameter collector will act as an editor for the specified edit scope property.
         * If you specify this option, do not also specify either supplyInitialData or receiveResult.
         */
        editScopeAccessor?: MsPortalFx.ViewModels.Forms.EditScopeAccessors<TResult>;
    }): BladeReference<void>;
}
export interface RecentResources_ReactViewReferenceFactory {
    /**
     * Creates a reference to the RecentResources.ReactView blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options?: {
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<void>;
}
export interface ResourceGroupMapBladeReferenceFactory {
    /**
     * Creates a reference to the ResourceGroupMapBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.ResourceGroupMapBlade.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.ResourceGroupMapBlade.Parameters>;
}
export interface ResourceGroupOverviewReferenceFactory {
    /**
     * Creates a reference to the ResourceGroupOverview blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: { id: string; };
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<{ id: string; }>;
}
export interface ResourceMenuBladeInputs {
    id: any;
    menuid?: any;
    menucontext?: any;
    referrerInfo?: any;
}
export interface ResourceMenuBladeReferenceFactory {
    /**
     * Creates a reference to the ResourceMenuBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: ResourceMenuBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<ResourceMenuBladeInputs>;
}
export interface ResourcePickerReferenceFactory {
    /**
     * Creates a reference to the ResourcePicker blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.ResourcePicker.Parameters;
        /** Callback that is invoked when the blade is closed and returns the data to the parent. */
        onClosed: BladeClosedWithDataHandler<HubsExtension.ResourcePicker.Results>;
    }): BladeReference<HubsExtension.ResourcePicker.Parameters>;
}
export interface ResourcePropertiesReferenceFactory {
    /**
     * Creates a reference to the ResourceProperties blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.ResourcePropertiesBlade.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.ResourcePropertiesBlade.Parameters>;
}
export interface ResourcesInputs {
    resourceType?: any;
    selectedSubscriptionId?: any;
    filter?: any;
    scope?: any;
    kind?: any;
}
export interface ResourcesReferenceFactory {
    /**
     * Creates a reference to the Resources blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: ResourcesInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<ResourcesInputs>;
}
export interface ResourcesWithTag_ReactViewReferenceFactory {
    /**
     * Creates a reference to the ResourcesWithTag.ReactView blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: { tagName: string; tagValue: string; };
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<{ tagName: string; tagValue: string; }>;
}
export interface ResourceTagsBladeReferenceFactory {
    /**
     * Creates a reference to the ResourceTagsBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.ResourceTagsBlade.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.ResourceTagsBlade.Parameters>;
}
export interface Tags_ReactViewReferenceFactory {
    /**
     * Creates a reference to the Tags.ReactView blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options?: {
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<void>;
}
export interface TagsBladeReferenceFactory {
    /**
     * Creates a reference to the TagsBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.TagsBlade.Parameters;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedHandler;
    }): BladeReference<HubsExtension.TagsBlade.Parameters>;
}
export interface TemplateEditorBladeReferenceFactory {
    /**
     * Creates a reference to the TemplateEditorBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference<TResult, TConfig>(options: {
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<TResult>;
        /**
         * A callback that supplies initial data for the parameter provider in the child blade each time it opens.
         * Note that the object received by the parameter provider will be a deep clone of the value you give, rather than the original instance, because it is passed (and sometimes stored) in a serialized form.
         * @return Initial data for the child blade.
         */
        supplyInitialData?: () => TResult;
        /**
         * A callback that supplies additional configuration options for the provider each time it opens. You can use this to pass non-editable data, for example configuring how a form will be displayed.
         * @return Arbitrary configuration options for the child blade.
         */
        supplyProviderConfig?: () => TConfig;
        /** A callback to be invoked when the child blade supplies a result and closes. */
        receiveResult?: (result: TResult) => void;
        /**
         * Provides an easy way to integrate a parameter collector with an EditScope.
         * The collector will supply initial data to the provider from this edit scope property, and will automatically insert the provider's output into this edit scope property.
         * The net result is that your parameter collector will act as an editor for the specified edit scope property.
         * If you specify this option, do not also specify either supplyInitialData or receiveResult.
         */
        editScopeAccessor?: MsPortalFx.ViewModels.Forms.EditScopeAccessors<TResult>;
    }): BladeReference<void>;
}
export interface TemplateEditorBladeV2ReferenceFactory {
    /**
     * Creates a reference to the TemplateEditorBladeV2 blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: HubsExtension.TemplateEditorBladeV2.Parameters;
        /** Callback that is invoked when the blade is closed and returns the data to the parent. */
        onClosed: BladeClosedWithDataHandler<HubsExtension.TemplateEditorBladeV2.Results>;
    }): BladeReference<HubsExtension.TemplateEditorBladeV2.Parameters>;
}
export interface UnauthorizedAssetBladeInputs {
    id?: any;
}
export interface UnauthorizedAssetBladeReferenceFactory {
    /**
     * Creates a reference to the UnauthorizedAssetBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: UnauthorizedAssetBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<UnauthorizedAssetBladeInputs>;
}
export interface UnavailableAssetBladeInputs {
    id?: any;
}
export interface UnavailableAssetBladeReferenceFactory {
    /**
     * Creates a reference to the UnavailableAssetBlade blade in the HubsExtension extension.
     * @param options Configures the blade reference.
     */
    createReference(options: {
        /** Input parameters to pass to the child blade. */
        parameters: UnavailableAssetBladeInputs;
        /** Optional callback that is invoked when the blade is closed. */
        onClosed?: BladeClosedWithDataHandler<any>;
    }): BladeReference<UnavailableAssetBladeInputs>;
}
declare global {
    interface ImportedBladeReferenceFactories {
        "HubsExtension": {
            "Blades": {
                "ARGBrowseAllInMenu": ARGBrowseAllInMenuReferenceFactory;
                "ARGBrowseResourceGroupsInMenu": ARGBrowseResourceGroupsInMenuReferenceFactory;
                "ARGBrowseResourcesInMenu": ARGBrowseResourcesInMenuReferenceFactory;
                "ArgEditPinnedQueryBlade": ArgEditPinnedQueryBladeReferenceFactory;
                "ArgQueryBlade": ArgQueryBladeReferenceFactory;
                "AssignTagsBlade": AssignTagsBladeReferenceFactory;
                "BrowseAll": BrowseAllReferenceFactory;
                "BrowseAllInMenu": BrowseAllInMenuReferenceFactory;
                "BrowseAllLegacy": BrowseAllLegacyReferenceFactory;
                "BrowseAllResourcesBlade": BrowseAllResourcesBladeReferenceFactory;
                "BrowseFallback.ReactView": BrowseFallback_ReactViewReferenceFactory;
                "BrowseGroupsInMenu": BrowseGroupsInMenuReferenceFactory;
                "BrowseInMenu": BrowseInMenuReferenceFactory;
                "BrowseInstanceLinkBlade": BrowseInstanceLinkBladeReferenceFactory;
                "BrowseQuery": BrowseQueryReferenceFactory;
                "BrowseResource": BrowseResourceReferenceFactory;
                "BrowseResourceBlade": BrowseResourceBladeReferenceFactory;
                "BrowseResourceGroupBlade": BrowseResourceGroupBladeReferenceFactory;
                "BrowseResourceGroups": BrowseResourceGroupsReferenceFactory;
                "BrowseResourcesWithTag": BrowseResourcesWithTagReferenceFactory;
                "ColumnChooser.ReactView": ColumnChooser_ReactViewReferenceFactory;
                "DeployFromTemplateBlade": DeployFromTemplateBladeReferenceFactory;
                "DeploymentDetailsBlade": DeploymentDetailsBladeReferenceFactory;
                "DeploymentInputsBlade": DeploymentInputsBladeReferenceFactory;
                "DeploymentOutputsBlade": DeploymentOutputsBladeReferenceFactory;
                "DeploymentsList.ReactView": DeploymentsList_ReactViewReferenceFactory;
                "DeployToAzure": DeployToAzureReferenceFactory;
                "EditTagsBlade": EditTagsBladeReferenceFactory;
                "GptGeneratorBlade": GptGeneratorBladeReferenceFactory;
                "InProductFeedbackBlade": InProductFeedbackBladeReferenceFactory;
                "MapResourceGroupBlade": MapResourceGroupBladeReferenceFactory;
                "MoveResources.ReactView": MoveResources_ReactViewReferenceFactory;
                "MyAccess.ReactView": MyAccess_ReactViewReferenceFactory;
                "NotFoundAssetBlade": NotFoundAssetBladeReferenceFactory;
                "ParametersEditorBlade": ParametersEditorBladeReferenceFactory;
                "ParametersFileEditorBlade": ParametersFileEditorBladeReferenceFactory;
                "RecentResources.ReactView": RecentResources_ReactViewReferenceFactory;
                "ResourceGroupMapBlade": ResourceGroupMapBladeReferenceFactory;
                "ResourceGroupOverview": ResourceGroupOverviewReferenceFactory;
                "ResourceMenuBlade": ResourceMenuBladeReferenceFactory;
                "ResourcePicker": ResourcePickerReferenceFactory;
                "ResourceProperties": ResourcePropertiesReferenceFactory;
                "Resources": ResourcesReferenceFactory;
                "ResourcesWithTag.ReactView": ResourcesWithTag_ReactViewReferenceFactory;
                "ResourceTagsBlade": ResourceTagsBladeReferenceFactory;
                "Tags.ReactView": Tags_ReactViewReferenceFactory;
                "TagsBlade": TagsBladeReferenceFactory;
                "TemplateEditorBlade": TemplateEditorBladeReferenceFactory;
                "TemplateEditorBladeV2": TemplateEditorBladeV2ReferenceFactory;
                "UnauthorizedAssetBlade": UnauthorizedAssetBladeReferenceFactory;
                "UnavailableAssetBlade": UnavailableAssetBladeReferenceFactory;
            };
            "MenuBlades": {
                "DeploymentDetailsBlade": DeploymentDetailsBladeReferenceFactory;
                "ResourceMenuBlade": ResourceMenuBladeReferenceFactory;
            };
        };
    }
}
